<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">


  <PropertyGroup>
	<ClojureCLRBuildDir>$(MSBuildThisFileDirectory)\Build</ClojureCLRBuildDir>
    <PublicKey>$(ClojureCLRBuildDir)\Key.snk</PublicKey>
	<BuildSysDir>$(RootDir)Build</BuildSysDir>
  </PropertyGroup>


  <Import Project="$(BuildSysDir)\Tasks.targets" />
  <Import Project="$(MSBuildThisFileDirectory)\CurrentVersion.props" />
  
  
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Mono Condition="'$(OS)' != 'Windows_NT'">true</Mono>
	
	<RootDir>$(MSBuildThisFileDirectory)</RootDir>
	<Solution>$(RootDir)Clojure.sln</Solution>	
	
  </PropertyGroup>
  
  <PropertyGroup>	
	
	<TestTargetFramework Condition=" '$(TestTargetFramework)' == '' ">net9.0</TestTargetFramework>
	
	<Error Condition=" '$(TestTargetFramework)' != 'net462' AND '$(TestTargetFramework)' != 'net481' AND '$(TestTargetFramework)' != 'net9.0' AND '$(TestTargetFramework)' != 'net8.0' AND '$(TestTargetFramework)' != 'net6.0'"/>
		
	<!--	
	<TestLibraryFramework Condition=" '$(TestTargetFramework)' == 'net462' ">netstandard2.0</TestLibraryFramework>
	<TestLibraryFramework Condition=" '$(TestTargetFramework)' != 'net462' ">netstandard2.1</TestLibraryFramework>
	-->
	
	<!-- When I switched target frameworks for Clojure.Source and Clojure.Tests, needed to change TestLibraryFramework to match TestTargetFramework -->
	<TestLibraryFramework>$(TestTargetFramework)</TestLibraryFramework>
	

	<TestDir>$(RootDir)Test\$(Configuration)\$(TestTargetFramework)</TestDir>
	
	<ClojureMainBinDir Condition=" '$(TestTargetFramework)' == 'net462' OR '$(TestTargetFramework)' == 'net481'	">$(RootDir)Clojure.Main461\bin\$(Configuration)\$(TestTargetFramework)</ClojureMainBinDir>
	<ClojureMainBinDir Condition=" '$(TestTargetFramework)' != 'net462' AND  '$(TestTargetFramework)' != 'net481' ">$(RootDir)Clojure.Main\bin\$(Configuration)\$(TestTargetFramework)</ClojureMainBinDir>
    <clji Condition=" '$(TestTargetFramework)' == 'net462' OR '$(TestTargetFramework)' == 'net481' ">Clojure.Main461.exe</clji>
    <clji Condition=" '$(TestTargetFramework)' != 'net462' AND  '$(TestTargetFramework)' != 'net481' ">Clojure.Main.exe</clji>		
    <clji Condition=" '$(TestTargetFramework)' != 'net462' AND  '$(TestTargetFramework)' != 'net481' And '$(MSBuildRuntimeType)' == 'Core' ">dotnet run --project $(RootDir)Clojure.Main --framework $(TestTargetFramework) -c $(Configuration) --</clji>		
	
	<ClojureCompileBinDir>$(RootDir)Clojure.Compile\bin\$(Configuration)\$(TestTargetFramework)</ClojureCompileBinDir>
	<cljc>Clojure.Compile.exe</cljc>
	
	<ClojureSourceBinDir>$(RootDir)Clojure.Source\bin\$(Configuration)\$(TestLibraryFramework)</ClojureSourceBinDir>
	<ClojureTestsBinDir>$(RootDir)Clojure.Tests\bin\$(Configuration)\$(TestLibraryFramework)</ClojureTestsBinDir>
	
	<StageDir>$(RootDir)Stage</StageDir>

    <ZipVersion Condition=" '$(VersionSuffix)' == '' ">$(MajorVersion).$(MinorVersion).$(PatchVersion)</ZipVersion>
    <ZipVersion Condition=" '$(VersionSuffix)' != '' ">$(MajorVersion).$(MinorVersion).$(PatchVersion)-$(VersionSuffix)</ZipVersion>
	
  </PropertyGroup>

  <PropertyGroup>
    <DirectLinking Condition=" '$(DirectLinking)' == '' ">true</DirectLinking>
    <Runtime Condition=" '$(Runtime)' == '' ">.Net</Runtime>
	<PlatformSym Condition=" '$(Runtime)' == 'Mono' ">MONO</PlatformSym>
	<PlatformSym Condition=" '$(Runtime)' == '.Net' ">DOTNET</PlatformSym>
  </PropertyGroup>
	
  <Target Name="ListParams">
  	<Message Text="RootDir = $(RootDir)" />
	<Message Text="Solution = $(Solution)" />
	<Message Text="BuildSysDir = $(BuildSysDir)" />
    <Message Text="TestTargetFramework = $(TestTargetFramework)" />
	<Message Text="TestLibraryFramework = $(TestLibraryFramework)" />
	<Message Text="Configuration = $(Configuration)" />
	<Message Text="Mono = $(Mono)" />
	<Message Text="TestDir = $(TestDir)" />
	<Message Text="ClojureCompileBinDir = $(ClojureCompileBinDir)" />
	<Message Text="ClojureMainBinDir = $(ClojureMainBinDir)" />
	<Message Text="ClojureSourceBinDir = $(ClojureSourceBinDir)" />
	<Message Text="ClojureTestsBinDir = $(ClojureTestsBinDir)" />
	<Message Text="DirectLinking = $(DirectLinking)" />
	<Message Text="PlatformSym = $(PlatformSym)" />
	<Message Text="StageDir = $(StageDir)" />
	<Message Text="ClojureCLRBuildDir = $(ClojureCLRBuildDir)" />
	<Message Text="PublicKey = $(PublicKey)" />
	<Message Text="MajorVersion = $(MajorVersion)" />
	<Message Text="MinorVersion = $(MinorVersion)" />
	<Message Text="PatchVersion = $(PatchVersion)" />
	<Message Text="ZipVersion = $(ZipVersion)" />
	
  </Target>
 
   <PropertyGroup>
	<BuildProperties>
	  RootDir=$(RootDir);
	  Configuration=$(Configuration);
	  Runtime=$(Runtime);
	  PlatformSym=$(PlatformSym);
	  DirectLinking=$(DirectLinking);
	  Mono=$(Mono)	  
	</BuildProperties>
   </PropertyGroup>

  <Target Name="RestoreReferences">
    <MSBuild Projects="$(Solution)" Targets="Restore" />
  </Target>

   <Target Name="Build" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Build"
             Properties="$(BuildProperties)"/>
  </Target>
  
   <Target Name="Rebuild" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Rebuild"
             Properties="$(BuildProperties)"/>
  </Target>
  
  <Target Name="Clean" DependsOnTargets="RestoreReferences">
    <MSBuild Projects="$(Solution)"
			 Targets="Clean"
             Properties="$(BuildProperties)"/>
  </Target> 
  
  <Target Name="DeepClean" DependsOnTargets="Clean">
	<RemoveDir Directories="$(RootDir)Test;$(StageDir)"/>
	<RemoveDir Directories="$(RootDir)Clojure\bin;$(RootDir)Clojure\obj"/>
	<RemoveDir Directories="$(RootDir)Clojure.Source\bin;$(RootDir)Clojure.Source\obj"/>
	<RemoveDir Directories="$(RootDir)Clojure.Main\bin;$(RootDir)Clojure.Main\obj"/>
	<RemoveDir Directories="$(RootDir)Clojure.Main461\bin;$(RootDir)Clojure.Main461\obj;$(RootDir)Clojure.Main461\Content"/>
	<RemoveDir Directories="$(RootDir)Clojure.Compile\bin;$(RootDir)Clojure.Compile\obj"/>
	<RemoveDir Directories="$(RootDir)Clojure.Tests\bin;$(RootDir)Clojure.Tests\obj"/>
	<RemoveDir Directories="$(RootDir)Clojure.Tests.Support\bin;$(RootDir)Clojure.Tests.Support\obj"/>	
	<RemoveDir Directories="$(RootDir)Clojure.Samples\bin;$(RootDir)Clojure.Samples\obj"/>
	<RemoveDir Directories="$(RootDir)CSharp.Tests\bin;$(RootDir)CSharp.Tests\obj"/>
  </Target>
  

  <Target Name="StageTest" DependsOnTargets="Build">
    <ItemGroup>
		<ClojureCompileAssets Include="$(ClojureCompileBinDir)\**\*" />
		<ClojureMainAssets Include="$(ClojureMainBinDir)\**\*" />
		<ClojureTestsAssets Include="$(ClojureTestsBinDir)\**\*" />
	</ItemGroup>	
	<Message Importance="high" Text="ClojureCompileAssets = '$(ClojureCompileAssets)'"/>
	<Message Importance="high" Text="ClojureMainAssets = '$(ClojureMainAssets)'"/>
	<Message Importance="high" Text="ClojureTestsAssets = '$(ClojureTestsAssets)'"/>
	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureCompileAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />
		<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureMainAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />	  
		<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureTestsAssets)"
		  DestinationFolder="$(TestDir)\%(RecursiveDir)" />	  
  </Target>  
  
  <Target Name="CompileTest" DependsOnTargets="StageTest" Condition="'$(TestTargetFramework)' == 'net462' OR '$(TestTargetFramework)' == 'net481' OR '$(TestTargetFramework)' == 'net9.0'">
    <Exec Command="$(cljc) clojure.test-clojure.genclass.examples clojure.test-clojure.protocols.examples clojure.test-clojure.proxy.examples clojure.test-clojure.attributes clojure.test-clojure.compilation.load-ns clojure.test-clojure.compilation.line-number-examples" 
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(cljc) clojure.test-clojure.genclass.examples clojure.test-clojure.protocols.examples clojure.test-clojure.proxy.examples clojure.test-clojure.attributes  clojure.test-clojure.compilation.load-ns clojure.test-clojure.compilation.line-number-examples" 
          WorkingDirectory="$(TestDir)"
           Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>
  
  

  
  <Target Name="Test" DependsOnTargets="StageTest;CompileTest">
    <Copy SkipUnchangedFiles="true" SourceFiles="Clojure.Tests\clojure\run_test.clj" DestinationFolder="$(TestDir)" />
    <SetEnvironmentVariable Condition="'$(TestTargetFramework)' == 'net462' OR '$(TestTargetFramework)' == 'net481'  OR '$(TestTargetFramework)' == 'net9.0'"
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns clojure.test-clojure.ns-libs-load-later}" />
	<SetEnvironmentVariable Condition="'$(TestTargetFramework)' != 'net462' AND '$(TestTargetFramework)' != 'net481' AND'$(TestTargetFramework)' != 'net9.0' "
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns clojure.test-clojure.ns-libs-load-later clojure.test-clojure.attributes clojure.test-clojure.compilation2 clojure.test-clojure.genclass}" />						
    <Exec Command="$(clji) run_test.clj"       WorkingDirectory="$(TestDir)" Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(clji) run_test.clj"  WorkingDirectory="$(TestDir)" Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>

  <Target Name="TestGen" DependsOnTargets="StageTest;CompileTest">
    <Copy SkipUnchangedFiles="true" SourceFiles="Clojure.Tests\clojure\run_test_generative.clj" DestinationFolder="$(TestDir)" />
	<SetEnvironmentVariable Condition="'$(TestTargetFramework)' != 'net462' AND '$(TestTargetFramework)' != 'net481' AND '$(TestTargetFramework)' != 'net9.0'"
							Name="clojure.test-clojure.exclude-namespaces" 
							Value="#{clojure.test-clojure.compilation.load-ns clojure.test-clojure.attributes clojure.test-clojure.compilation2 clojure.test-clojure.genclass}" />						
    <Exec Command="$(clji) run_test_generative.clj"      WorkingDirectory="$(TestDir)"  Condition=" '$(Runtime)' == '.Net' "/>
    <Exec Command="mono $(clji) run_test_generative.clj" WorkingDirectory="$(TestDir)"  Condition=" '$(Runtime)' == 'Mono' "/>
  </Target>

  <Target Name="CreateStageDir">
     <MakeDir Directories="$(StageDir)"/>
  </Target>

  <Target Name="PackAll" DependsOnTargets="CreateStageDir">
    <Exec Command="dotnet pack -c $(Configuration)" WorkingDirectory="$(RootDir)\Clojure"/>
	<Exec Command="dotnet pack -c $(Configuration)" WorkingDirectory="$(Rootdir)\Clojure.Main"/>
	
	<ItemGroup>
		<ClojureAsset Include="$(RootDir)Clojure\bin\$(Configuration)\*.nupkg" />
		<ClojureMainAsset Include="$(RootDir)Clojure.Main\bin\$(Configuration)\*.nupkg" />
	</ItemGroup>
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureAsset)"
		  DestinationFolder="$(StageDir)\%(RecursiveDir)" />
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureMainAsset)"
		  DestinationFolder="$(StageDir)\%(RecursiveDir)" />		  
  </Target>
  

 <!--  Need to update whenever more DLLs are added to basic build 
       THis is the original version, before Core - keeping it here for now for reference.
    <Target Name="Ilmerge" DependsOnTargets="Build" Condition="'$(TestTargetFramework)' == 'net462'">
    <MakeDir Directories="$(StageDir)\ilmerge\$(TestTargetFramework)" /> 
    <Exec WorkingDirectory="$(ClojureCompileBinDir)" 
          Command="ilmerge /keyfile:$(PublicKey) /out:$(StageDir)\ilmerge\$(TestTargetFramework)\Clojure.dll Clojure.dll clojure.clr.io.clj.dll clojure.math.clj.dll clojure.clr.shell.clj.dll clojure.core.clj.dll clojure.core.protocols.clj.dll clojure.core.reducers.clj.dll clojure.core.server.clj.dll clojure.core_clr.clj.dll clojure.core_deftype.clj.dll clojure.core_print.clj.dll clojure.core_proxy.clj.dll clojure.data.clj.dll clojure.edn.clj.dll clojure.genclass.clj.dll clojure.gvec.clj.dll clojure.instant.clj.dll clojure.main.clj.dll clojure.pprint.clj.dll clojure.pprint.cl_format.clj.dll clojure.pprint.column_writer.clj.dll clojure.pprint.dispatch.clj.dll clojure.pprint.pprint_base.clj.dll clojure.pprint.pretty_writer.clj.dll clojure.pprint.print_table.clj.dll clojure.pprint.utilities.clj.dll clojure.reflect.clj.dll clojure.reflect.clr.clj.dll clojure.repl.clj.dll clojure.set.clj.dll clojure.stacktrace.clj.dll clojure.string.clj.dll clojure.template.clj.dll clojure.test.clj.dll clojure.test.junit.clj.dll clojure.test.tap.clj.dll clojure.uuid.clj.dll clojure.walk.clj.dll clojure.zip.clj.dll clojure.datafy.clj.dll clojure.clr.basis.impl.cljc.dll clojure.clr.basis.cljc.dll clojure.clr.process.clj.dll clojure.tools.deps.interop.cljc.cll clojure.repl.deps.cljc.dll"
          />

  </Target>
  
 --> 

  <!-- We want to run ILMerge on th Clojure.dll for the 462 version prior to doing the pack.  Sneaking this in after the build   -->
  <Target Name="ILMerge462" DependsOnTargets="CreateStageDir">
  
	<PropertyGroup>
		<ILMergeStageDir>$(StageDir)\ilmerge\</ILMergeStageDir>
		<UnzippedDir>$(ILMergeStageDir)\unzipped</UnzippedDir>
		<SourceDir>$(RootDir)\Clojure.Compile\bin\$(Configuration)\net462</SourceDir>
		
	</PropertyGroup>
    <MakeDir Directories="$(ILMergeStageDir)" /> 
    <Exec WorkingDirectory="$(SourceDir)" 
          Command="ilmerge /keyfile:$(PublicKey) /out:$(ILMergeStageDir)\Clojure.dll Clojure.dll clojure.clr.io.clj.dll clojure.math.clj.dll clojure.clr.shell.clj.dll clojure.core.clj.dll clojure.core.protocols.clj.dll clojure.core.reducers.clj.dll clojure.core.server.clj.dll clojure.core_clr.clj.dll clojure.core_deftype.clj.dll clojure.core_print.clj.dll clojure.core_proxy.clj.dll clojure.data.clj.dll clojure.edn.clj.dll clojure.genclass.clj.dll clojure.gvec.clj.dll clojure.instant.clj.dll clojure.main.clj.dll clojure.pprint.clj.dll clojure.pprint.cl_format.clj.dll clojure.pprint.column_writer.clj.dll clojure.pprint.dispatch.clj.dll clojure.pprint.pprint_base.clj.dll clojure.pprint.pretty_writer.clj.dll clojure.pprint.print_table.clj.dll clojure.pprint.utilities.clj.dll clojure.reflect.clj.dll clojure.reflect.clr.clj.dll clojure.repl.clj.dll clojure.set.clj.dll clojure.stacktrace.clj.dll clojure.string.clj.dll clojure.template.clj.dll clojure.test.clj.dll clojure.test.junit.clj.dll clojure.test.tap.clj.dll clojure.uuid.clj.dll clojure.walk.clj.dll clojure.zip.clj.dll clojure.datafy.clj.dll clojure.clr.basis.impl.cljc.dll clojure.clr.basis.cljc.dll clojure.clr.process.clj.dll clojure.tools.deps.interop.cljc.dll  clojure.repl.deps.cljc.dll"
          />
	
	<Unzip
		SourceFiles="$(StageDir)\Clojure.$(ZipVersion).nupkg"
		DestinationFolder="$(UnzippedDir)"
		OverwriteReadOnlyFiles="true"
		/>
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="$(ILMergeStageDir)\Clojure.dll"
		  DestinationFolder="$(UnzippedDir)\lib\net462" 
		  />

    <ZipDirectory SourceDirectory="$(UnzippedDir)"
	              DestinationFile ="$(StageDir)\Clojure.$(ZipVersion).nupkg"
				  Overwrite="true"
				  />		
  </Target>
   
   
   <!-- We want to run ILMerge on th Clojure.dll for the 481 version prior to doing the pack.  Sneaking this in after the build   -->
   <!-- TODO: Merge this code with ILMerge481 -->
  <Target Name="ILMerge481" DependsOnTargets="CreateStageDir">
  
	<PropertyGroup>
		<ILMergeStageDir>$(StageDir)\ilmerge\</ILMergeStageDir>
		<UnzippedDir>$(ILMergeStageDir)\unzipped</UnzippedDir>
		<SourceDir>$(RootDir)\Clojure.Compile\bin\$(Configuration)\net481</SourceDir>
		
	</PropertyGroup>
    <MakeDir Directories="$(ILMergeStageDir)" /> 
    <Exec WorkingDirectory="$(SourceDir)" 
          Command="ilmerge /keyfile:$(PublicKey) /out:$(ILMergeStageDir)\Clojure.dll Clojure.dll clojure.clr.io.clj.dll clojure.math.clj.dll clojure.clr.shell.clj.dll clojure.core.clj.dll clojure.core.protocols.clj.dll clojure.core.reducers.clj.dll clojure.core.server.clj.dll clojure.core_clr.clj.dll clojure.core_deftype.clj.dll clojure.core_print.clj.dll clojure.core_proxy.clj.dll clojure.data.clj.dll clojure.edn.clj.dll clojure.genclass.clj.dll clojure.gvec.clj.dll clojure.instant.clj.dll clojure.main.clj.dll clojure.pprint.clj.dll clojure.pprint.cl_format.clj.dll clojure.pprint.column_writer.clj.dll clojure.pprint.dispatch.clj.dll clojure.pprint.pprint_base.clj.dll clojure.pprint.pretty_writer.clj.dll clojure.pprint.print_table.clj.dll clojure.pprint.utilities.clj.dll clojure.reflect.clj.dll clojure.reflect.clr.clj.dll clojure.repl.clj.dll clojure.set.clj.dll clojure.stacktrace.clj.dll clojure.string.clj.dll clojure.template.clj.dll clojure.test.clj.dll clojure.test.junit.clj.dll clojure.test.tap.clj.dll clojure.uuid.clj.dll clojure.walk.clj.dll clojure.zip.clj.dll clojure.datafy.clj.dll clojure.clr.basis.impl.cljc.dll clojure.clr.basis.cljc.dll clojure.clr.process.clj.dll clojure.tools.deps.interop.cljc.dll  clojure.repl.deps.cljc.dll"
          />
	
	<Unzip
		SourceFiles="$(StageDir)\Clojure.$(ZipVersion).nupkg"
		DestinationFolder="$(UnzippedDir)"
		OverwriteReadOnlyFiles="true"
		/>
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="$(ILMergeStageDir)\Clojure.dll"
		  DestinationFolder="$(UnzippedDir)\lib\net481" 
		  />

    <ZipDirectory SourceDirectory="$(UnzippedDir)"
	              DestinationFile ="$(StageDir)\Clojure.$(ZipVersion).nupkg"
				  Overwrite="true"
				  />		
  </Target>
     
  
  <Target Name="ZipAll" DependsOnTargets="PackAll;ILMerge462;ILMerge481">
  
  	<ZipDirectory SourceDirectory="$(RootDir)Clojure.Main\bin\$(Configuration)\net9.0\publish"
	              DestinationFile ="$(StageDir)\clojure-clr-$(ZipVersion)-$(Configuration)-net9.0.zip"
				  Overwrite="true"/>	

	<ZipDirectory SourceDirectory="$(RootDir)Clojure.Main\bin\$(Configuration)\net8.0\publish"
	              DestinationFile ="$(StageDir)\clojure-clr-$(ZipVersion)-$(Configuration)-net8.0.zip"
				  Overwrite="true"/>	

	<ZipDirectory SourceDirectory="$(RootDir)Clojure.Main\bin\$(Configuration)\net6.0\publish"
	              DestinationFile ="$(StageDir)\clojure-clr-$(ZipVersion)-$(Configuration)-net6.0.zip"
				  Overwrite="true"/>			  
				  
    <!-- TOOD: Merge the 462 and 481 versions -->
	<ItemGroup>
		<ClojureCompile462Assets Include="$(RootDir)Clojure.Compile\bin\$(Configuration)\net462\Clojure.Compile.*" />
		<ClojureMain462Assets Include="$(RootDir)Clojure.Main461\bin\$(Configuration)\net462\**\*" />
	</ItemGroup>	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureMain462Assets)"
		  DestinationFolder="$(StageDir)\net462\%(RecursiveDir)" />	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureCompile462Assets)"
		  DestinationFolder="$(StageDir)\net462\%(RecursiveDir)" />			  
	  
	<ZipDirectory SourceDirectory="$(StageDir)\net462"
	              DestinationFile ="$(StageDir)\clojure-clr-$(ZipVersion)-$(Configuration)-net4.6.2.zip"
				  Overwrite="true"/>
				  
	<ItemGroup>
		<ClojureCompile481Assets Include="$(RootDir)Clojure.Compile\bin\$(Configuration)\net481\Clojure.Compile.*" />
		<ClojureMain481Assets Include="$(RootDir)Clojure.Main461\bin\$(Configuration)\net481\**\*" />
	</ItemGroup>	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureMain481Assets)"
		  DestinationFolder="$(StageDir)\net481\%(RecursiveDir)" />	
	<Copy SkipUnchangedFiles="true"
		  SourceFiles="@(ClojureCompile481Assets)"
		  DestinationFolder="$(StageDir)\net481\%(RecursiveDir)" />			  
	  
	<ZipDirectory SourceDirectory="$(StageDir)\net481"
	              DestinationFile ="$(StageDir)\clojure-clr-$(ZipVersion)-$(Configuration)-net4.8.1.zip"
				  Overwrite="true"/>
  </Target>		
  
  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$ -->
	
  <!-- RJ: New build and clean targets for .Net Core 3.X and .Net 5-->
  
  
  <Target Name="BuildD9">
    <Exec Command="dotnet build Clojure.sln -c Debug -p:Platform=&quot;Any CPU&quot; -f net9.0 -o clojure-clr-debug9" 
          WorkingDirectory="$(OutputPath)" />
  </Target>

  <Target Name="BuildR9">
    <Exec Command="dotnet build Clojure.sln -c Release -p:Platform=&quot;Any CPU&quot; -f net9.0 -o clojure-clr-release9" 
          WorkingDirectory="$(OutputPath)" />
  </Target>

  <Target Name="BuildD8">
    <Exec Command="dotnet build Clojure.sln -c Debug -p:Platform=&quot;Any CPU&quot; -f net8.0 -o clojure-clr-debug8" 
          WorkingDirectory="$(OutputPath)" />
  </Target>

  <Target Name="BuildR8">
    <Exec Command="dotnet build Clojure.sln -c Release -p:Platform=&quot;Any CPU&quot; -f net8.0 -o clojure-clr-release8" 
          WorkingDirectory="$(OutputPath)" />
  </Target>
  
  <Target Name="BuildD6">
    <Exec Command="dotnet build Clojure.sln -c Debug -p:Platform=&quot;Any CPU&quot; -f net6.0 -o clojure-clr-debug6" 
          WorkingDirectory="$(OutputPath)" />
  </Target>

  <Target Name="BuildR6">
    <Exec Command="dotnet build Clojure.sln -c Release -p:Platform=&quot;Any CPU&quot; -f net6.0 -o clojure-clr-release6" 
          WorkingDirectory="$(OutputPath)" />  
  </Target>
  

<!-- Targets below are part of the pre-Core build, haven't been updated yet. -->


  

  <!-- RJ: Reworked Dist target to work around Mono bug related to embeding ItemGroup inside a Target tag -->
  <Target Name="Dist" DependsOnTargets="Build">
      <!--DLR, Clojure dlls and exes-->
      <CreateItem
      Include="$(OutputPath)\Clojure.*;$(OutputPath)\Microsoft.*" 
      Exclude="$(OutputPath)\Clojure.Tests.dll;$(OutputPath)\Clojure.Tests.pdb;
               $(OutputPath)\Clojure.Source.dll;$(OutputPath)\Clojure.Source.pdb;
               $(OutputPath)\clojure.test-clojure.genclass.examples.ExampleClass.dll;
               $(OutputPath)\clojure.test-clojure.genclass.examples.ExampleClass.pdb;
               $(OutputPath)\Clojure.Main.vshost.exe;$(OutputPath)\Clojure.Main.vshost.exe.manifest">
      <Output
            TaskParameter="Include"
            ItemName="Dlls"/>
     </CreateItem>
      <!--clj and AOT clj files-->
    <CreateItem
       Include="$(OutputPath)\clojure\**\*"
       Exclude="$(OutputPath)\clojure\test_clojure\**\*">
     <Output
       TaskParameter="Include"
       ItemName="CljFiles"/>
     </CreateItem>
    <Copy SourceFiles="@(Dlls)" DestinationFolder="..\dist\$(Configuration)" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(CljFiles)" DestinationFolder="..\dist\$(Configuration)\clojure\%(RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>

  
</Project>
